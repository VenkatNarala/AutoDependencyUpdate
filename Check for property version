task updateVersionVariables {
    doLast {
        println "🔍 Starting updateVersionVariables task..."

        def reportFile = file("build/dependencyUpdates/report.txt")
        def buildFile = file("build.gradle")

        if (!reportFile.exists()) {
            println "❌ report.txt not found in project root."
            return
        }

        println "📄 Reading report.txt..."
        def reportPattern = ~/^- ([\w\.\-]+):([\w\.\-]+) \[([\w\.\-]+) -> ([\w\.\-]+)]/
        def dependencyUpdates = [:]

        reportFile.eachLine { line ->
            def matcher = reportPattern.matcher(line.trim())
            if (matcher.matches()) {
                def group = matcher.group(1)
                def name = matcher.group(2)
                def oldVersion = matcher.group(3)
                def newVersion = matcher.group(4)
                def key = "${group}:${name}"
                dependencyUpdates[key] = [old: oldVersion, new: newVersion]
                println "✅ Found update in report.txt: ${key} -> ${newVersion}"
            } else {
                println "ℹ️ Skipped non-matching line in report.txt: ${line}"
            }
        }

        if (dependencyUpdates.isEmpty()) {
            println "⚠️ No dependency updates found in report.txt."
            return
        }

        println "📄 Reading build.gradle..."
        def buildText = buildFile.text

        def varUsagePattern = ~/["']([\w\.\-]+):([\w\.\-]+):\$\{(\w+)\}["']/
        def varVersionUpdates = [:]

        println "🔍 Scanning build.gradle for variable-based dependencies..."
        varUsagePattern.matcher(buildText).each { match ->
            def group = match[1]
            def name = match[2]
            def varName = match[3]
            def key = "${group}:${name}"

            if (dependencyUpdates.containsKey(key)) {
                def newVersion = dependencyUpdates[key].new
                varVersionUpdates[varName] = newVersion
                println "📌 Found variable usage: ${key} -> variable '${varName}' to be updated to ${newVersion}"
            } else {
                println "❌ No update found in report.txt for: ${key}"
            }
        }

        if (varVersionUpdates.isEmpty()) {
            println "⚠️ No matching variable updates found in build.gradle."
            return
        }

        println "✏️ Updating variable values inside ext { ... } block..."
        def updatedText = buildText.replaceAll(/(?m)^(\s*)(\w+)\s*=\s*'([\w\.\-]+)'/) { fullMatch, indent, varName, oldVersion ->
            if (varVersionUpdates.containsKey(varName)) {
                def newVersion = varVersionUpdates[varName]
                println "🛠️ Replacing: ${varName} = '${oldVersion}' ➡️ ${newVersion}"
                return "${indent}${varName} = '${newVersion}'"
            } else {
                return fullMatch
            }
        }

        buildFile.text = updatedText
        println "✅ build.gradle updated successfully."
    }
}
