import java.util.regex.*

def reportFile = file("build/dependencyUpdates/report.txt")
def gradleFile = file("build.gradle")

task updateVersionVariablesOnly {
    doLast {
        if (!reportFile.exists()) {
            println "❌ report.txt not found."
            return
        }

        def reportLines = reportFile.readLines()
        def updates = [:]  // Map of group:name -> newVersion

        // Step 1: Parse report.txt
        reportLines.each { line ->
            def matcher = line =~ /([\w\.\-]+):([\w\.\-]+).*->\s*([\w\.\-]+)/
            if (matcher.matches()) {
                def group = matcher[0][1]
                def name = matcher[0][2]
                def newVersion = matcher[0][3]
                updates["$group:$name"] = newVersion
            }
        }

        if (updates.isEmpty()) {
            println "⚠️ No valid dependency updates found in report.txt"
            return
        }

        def gradleText = gradleFile.text
        def updated = false

        // Step 2: Look for variable references like ${springBootVersion}
        updates.each { fullDep, newVersion ->
            def (group, name) = fullDep.split(":")
            def regex = /['"]${group}:${name}:\$\{([a-zA-Z0-9_]+)\}['"]/
            def matcher = gradleText =~ regex

            if (matcher.find()) {
                def varName = matcher[0][1]
                // Step 3: Update variable assignment
                def varRegex = /(?m)^\s*${varName}\s*=\s*['"]([^'"]+)['"]/
                gradleText = gradleText.replaceFirst(varRegex) { fullMatch ->
                    println "✅ Updating variable '${varName}' from '${matcher[0][0]}' to '${newVersion}'"
                    return fullMatch.replaceAll(/['"]([^'"]+)['"]/, "'${newVersion}'")
                }
                updated = true
            }
        }

        if (updated) {
            gradleFile.text = gradleText
            println "🎉 build.gradle variables updated successfully!"
        } else {
            println "ℹ️ No matching variables found to update."
        }
    }
}
