task updateVersionVariables {
    description = 'Updates version variables in build.gradle based on report.txt'
    doLast {
        def reportFile = file("build/dependencyUpdates/report.txt")
        def buildFile = file("build.gradle")

        if (!reportFile.exists()) {
            println "❌ report.txt not found!"
            return
        }

        def reportLines = reportFile.readLines().findAll { it.contains("->") && !it.trim().startsWith("#") }
        def reportMap = [:]

        // Parse lines like: org.springframework.boot:spring-boot-gradle-plugin -> 3.5.0
        reportLines.each { line ->
            def matcher = line =~ /^([^\s:]+):([^\s:]+).*->\s*([^\s]+)$/
            if (matcher.matches()) {
                def group = matcher[0][1]
                def name = matcher[0][2]
                def newVersion = matcher[0][3]
                reportMap["${group}:${name}"] = newVersion
            }
        }

        if (reportMap.isEmpty()) {
            println "❌ No valid entries in report.txt"
            return
        }

        def buildText = buildFile.text
        def updated = false

        // Loop through each entry like: com.diffplug.spotless:spotless-plugin-gradle -> 6.25.0
        reportMap.each { dep, newVersion ->
            def group = dep.split(":")[0]
            def name = dep.split(":")[1]

            // Search for a variable used in dependency declaration
            def dependencyPattern = ~/["'].*${group}:${name}:\$\{(\w+)}.*["']/
            def matcher = buildText =~ dependencyPattern

            if (matcher.find()) {
                def varName = matcher.group(1)
                def varPattern = ~/(^|\n)\s*${varName}\s*=\s*['"]([^'"]+)['"]/
                def versionMatcher = buildText =~ varPattern

                if (versionMatcher.find()) {
                    def currentVersion = versionMatcher.group(2)
                    if (currentVersion != newVersion) {
                        println "✅ Updating ${varName}: ${currentVersion} -> ${newVersion}"
                        buildText = buildText.replaceFirst(varPattern, "\n    ${varName} = '${newVersion}'")
                        updated = true
                    } else {
                        println "ℹ️  ${varName} already has latest version: ${currentVersion}"
                    }
                } else {
                    println "⚠️  Variable ${varName} used in dependency but not found in ext block."
                }
            }
        }

        if (updated) {
            buildFile.write(buildText)
            println "✅ build.gradle updated with new versions."
        } else {
            println "ℹ️  No updates needed."
        }
    }
}
