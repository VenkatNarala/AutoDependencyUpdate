import java.util.regex.*

def reportFile = file("build/dependencyUpdates/report.txt")
def buildFile = file("build.gradle")

task updateVersionVariables {
    doLast {
        if (!reportFile.exists()) {
            println "report.txt not found."
            return
        }

        println "Reading dependency updates from report.txt..."
        def reportLines = reportFile.readLines()

        def updateMap = [:]
        def reportRegex = ~/Found:\s+([\w\.\-]+):([\w\.\-]+)\s+->\s+([\w\.\-]+)/

        reportLines.each { line ->
            def matcher = reportRegex.matcher(line)
            if (matcher.find()) {
                def group = matcher.group(1)
                def name = matcher.group(2)
                def version = matcher.group(3)
                def key = "${group}:${name}"
                updateMap[key] = version
                println "Parsed from report: ${key} -> ${version}"
            }
        }

        if (updateMap.isEmpty()) {
            println "No valid dependency updates found in report.txt."
            return
        }

        def original = buildFile.text
        def updated = original

        def varRegex = ~/^\s*(\w+)\s*=\s*'([\w\.\-]+)'\s*$/
        def variableToDependency = [:]

        // Build reverse map from variable name to dependency (based on usage patterns)
        original.eachLine { line ->
            def usageMatcher = ~/["']([\w\.\-]+):([\w\.\-]+):\$\{(\w+)\}["']/.matcher(line)
            if (usageMatcher.find()) {
                def depKey = "${usageMatcher.group(1)}:${usageMatcher.group(2)}"
                def varName = usageMatcher.group(3)
                variableToDependency[varName] = depKey
            }
        }

        if (variableToDependency.isEmpty()) {
            println "No variable-based dependencies found in build.gradle."
            return
        }

        println "Checking for variable updates..."
        updated = updated.readLines().collect { line ->
            def varMatcher = varRegex.matcher(line)
            if (varMatcher.matches()) {
                def varName = varMatcher.group(1)
                def oldVersion = varMatcher.group(2)
                def depKey = variableToDependency[varName]

                if (depKey && updateMap.containsKey(depKey)) {
                    def newVersion = updateMap[depKey]
                    if (oldVersion != newVersion) {
                        println "Updating ${varName}: '${oldVersion}' -> '${newVersion}' (for ${depKey})"
                        return "    ${varName} = '${newVersion}'"
                    }
                }
            }
            return line
        }.join('\n')

        if (updated != original) {
            buildFile.write(updated)
            println "build.gradle has been updated with new variable versions."
        } else {
            println "No updates were applied to build.gradle."
        }
    }
}
