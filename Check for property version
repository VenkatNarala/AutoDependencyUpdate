import java.util.regex.*

task updateDependencyVersions {
    group = "versioning"
    description = "Updates dependencies in build.gradle using report.txt"

    doLast {
        def reportFile = file("build/dependencyUpdates/report.txt")
        def buildFile = file("build.gradle")

        println "🔍 Starting dependency update..."
        if (!reportFile.exists()) {
            println "❌ report.txt not found in project root!"
            return
        }

        def buildText = buildFile.text
        def versionMap = [:]

        // ✅ FIXED regex pattern to handle spaces and dash correctly
        def versionPattern = ~/^\s*-\s*([^\s:]+:[^\s\[]+)\s*\[.*?->\s*([^\]]+)\s*\]/

        println "📄 Reading versions from report.txt..."
        reportFile.eachLine { line ->
            def matcher = line =~ versionPattern
            if (matcher.matches()) {
                def coord = matcher[0][1].trim()
                def newVersion = matcher[0][2].trim()
                versionMap[coord] = newVersion
                println "🔧 Found update: ${coord} -> ${newVersion}"
            }
        }

        if (versionMap.isEmpty()) {
            println "⚠️ No updates found in report.txt."
            return
        }

        println "\n🔄 Updating version variables in ext { ... } block..."
        versionMap.each { coord, newVersion ->
            def name = coord.split(':')[1]
            def possibleVars = [
                "${name}Version",
                name.replaceAll('-', '') + "Version"
            ]
            possibleVars.each { varName ->
                def pattern = ~/(?m)^\s*${varName}\s*=\s*['"]([^'"]+)['"]/
                if (buildText =~ pattern) {
                    println "✅ Updated variable ${varName} -> ${newVersion}"
                    buildText = buildText.replaceAll(pattern) { full, oldVersion ->
                        "${varName} = '${newVersion}'"
                    }
                }
            }
        }

        println "\n🔄 Updating dependencies in build.gradle..."
        versionMap.each { coord, newVersion ->
            def (group, name) = coord.split(':')

            // ➕ Add version to unversioned dependencies
            def unversionedPattern = /(["'])${group}:${name}\1/
            if (buildText =~ unversionedPattern) {
                println "➕ Adding version for ${group}:${name} -> ${newVersion}"
                buildText = buildText.replaceAll(unversionedPattern) { _, quote ->
                    "${quote}${group}:${name}:${newVersion}${quote}"
                }
            }

            // 🔁 Replace hardcoded versions
            def versionedPattern = /(["'])${group}:${name}:[^"']+(["'])/
            if (buildText =~ versionedPattern) {
                println "🔁 Replacing version for ${group}:${name} -> ${newVersion}"
                buildText = buildText.replaceAll(versionedPattern) { _, q1, q2 ->
                    "${q1}${group}:${name}:${newVersion}${q2}"
                }
            }
        }

        println "\n💾 Writing updates to build.gradle..."
        buildFile.write(buildText)
        println "✅ build.gradle has been updated successfully!"
    }
}
