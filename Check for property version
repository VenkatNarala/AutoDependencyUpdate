task updateVersionVariables {
    description = 'Updates version variables in build.gradle based on report.txt'
    doLast {
        def reportFile = file("build/dependencyUpdates/report.txt")
        def buildFile = file("build.gradle")

        if (!reportFile.exists()) {
            println "‚ùå report.txt not found!"
            return
        }

        def reportLines = reportFile.readLines().findAll { it.contains("->") && !it.trim().startsWith("#") }
        println "üîç Found ${reportLines.size()} update lines in report.txt"

        def reportMap = [:]
        reportLines.each { line ->
            println "üìÑ Processing: $line"

            // Match format: - group:name [old -> new]
            def matcher = line =~ /^\s*-\s*([^\s:]+):([^\s:\[]+)\s+\[[^\[\]]+->\s*([^\[\]]+)]/
            if (matcher.matches()) {
                def group = matcher[0][1]
                def name = matcher[0][2]
                def newVersion = matcher[0][3].trim()
                def depKey = "${group}:${name}"
                reportMap[depKey] = newVersion
                println "‚úÖ Parsed: ${depKey} -> ${newVersion}"
            } else {
                println "‚ùå Failed to parse line: $line"
            }
        }

        if (reportMap.isEmpty()) {
            println "‚ùå No valid dependency updates found in report.txt"
            return
        }

        def buildText = buildFile.text
        def updated = false

        reportMap.each { depKey, newVersion ->
            def (group, name) = depKey.tokenize(':')
            def usagePattern = ~/["'].*${group}:${name}:\$\{(\w+)}.*["']/
            def usageMatcher = buildText =~ usagePattern

            if (usageMatcher.find()) {
                def varName = usageMatcher.group(1)
                println "üîç Found variable '${varName}' for dependency ${depKey}"

                def varPattern = ~/(?m)^\s*${varName}\s*=\s*['"]([^'"]+)['"]/
                def varMatcher = buildText =~ varPattern

                if (varMatcher.find()) {
                    def oldVersion = varMatcher.group(1)
                    if (oldVersion != newVersion) {
                        println "üîÅ Updating ${varName}: ${oldVersion} -> ${newVersion}"
                        buildText = buildText.replaceFirst(varPattern, "${varName} = '${newVersion}'")
                        updated = true
                    } else {
                        println "‚ÑπÔ∏è  ${varName} already up to date (${oldVersion})"
                    }
                } else {
                    println "‚ö†Ô∏è  Variable '${varName}' not found in ext block"
                }
            } else {
                println "‚ö†Ô∏è  Dependency ${depKey} not found with a variable reference"
            }
        }

        if (updated) {
            buildFile.write(buildText)
            println "‚úÖ build.gradle updated successfully."
        } else {
            println "‚ÑπÔ∏è  No version variables were changed."
        }
    }
}
