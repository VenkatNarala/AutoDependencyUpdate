import java.util.regex.*

task updateVersionVariables {
    def reportFile = file('build/dependencyUpdates/report.txt')
    def gradleFile = file('build.gradle')

    doLast {
        if (!reportFile.exists()) {
            println "❌ report.txt not found."
            return
        }

        def reportText = reportFile.text
        def reportPattern = ~/^\s*-\s*([\w\.\-]+):([\w\.\-]+) \[(.+?) -> (.+?)\]\s*$/
        def updates = [:]

        println "\n🔍 Parsing report.txt for dependency updates..."

        reportText.eachLine { line ->
            def matcher = reportPattern.matcher(line)
            if (matcher.matches()) {
                def group = matcher.group(1)
                def name = matcher.group(2)
                def oldVersion = matcher.group(3)
                def newVersion = matcher.group(4)
                def key = "${group}:${name}"
                updates[key] = [old: oldVersion, new: newVersion]
                println "✅ Found update: ${key} [${oldVersion} -> ${newVersion}]"
            }
        }

        if (updates.isEmpty()) {
            println "\n⚠️ No valid dependency updates found in report.txt"
            return
        }

        def gradleLines = gradleFile.readLines()
        def variablePattern = ~/^\s*(\w+)\s*=\s*['"]([\w\.\-]+)['"]\s*$/
        def variableToDependency = [:]

        println "\n🔍 Scanning build.gradle for variable references..."

        gradleLines.eachWithIndex { line, index ->
            if (line.contains('$')) {
                updates.each { key, versionInfo ->
                    def depPattern = /\$\{(\w+)\}/
                    def depMatcher = line =~ /${key.replace('.', '\\.').replace(':', '\\:')}.*\$\{(\w+)\}/
                    if (depMatcher.find()) {
                        def varName = depMatcher.group(1)
                        variableToDependency[varName] = versionInfo
                        println "🔗 Matched ${key} to variable \${${varName}}"
                    }
                }
            }
        }

        if (variableToDependency.isEmpty()) {
            println "\n⚠️ No variable-based dependencies matched with report.txt entries."
            return
        }

        println "\n✍️ Updating version variables in ext { } block..."

        def updatedLines = gradleLines.collect { line ->
            def matcher = variablePattern.matcher(line)
            if (matcher.matches()) {
                def varName = matcher.group(1)
                def currentVersion = matcher.group(2)
                if (variableToDependency.containsKey(varName)) {
                    def newVersion = variableToDependency[varName].new
                    if (currentVersion != newVersion) {
                        println "🔧 Updating ${varName}: ${currentVersion} -> ${newVersion}"
                        return line.replace(currentVersion, newVersion)
                    }
                }
            }
            return line
        }

        gradleFile.text = updatedLines.join('\n')
        println "\n✅ Version variables updated successfully in build.gradle"
    }
}
