task updateDependencies {
    doLast {
        def reportFile = file("report.txt")
        def buildFile = file("build.gradle")
        def originalText = buildFile.text

        // Step 1: Parse report.txt into a map
        def versionMap = [:]
        reportFile.eachLine { line ->
            def m = line =~ /-\s+([\w\.\-]+):([\w\.\-]+)\s+\[(.*?)\s+->\s+(.*?)\]/
            if (m.matches()) {
                def group = m[0][1]
                def name = m[0][2]
                def oldVer = m[0][3]
                def newVer = m[0][4]
                versionMap["$group:$name"] = [old: oldVer, new: newVer]
            }
        }

        def updatedText = originalText

        // Step 2: Update ext { ... } block for variables like springBootVersion
        updatedText = updatedText.replaceAll(/(?s)(ext\s*\{)(.*?)(\})/) { match, start, body, end ->
            def updatedBody = body.readLines().collect { line ->
                def varMatch = line =~ /(\w+)\s*=\s*['"]([^'"]+)['"]/
                if (varMatch.find()) {
                    def varName = varMatch[0][1]
                    def varValue = varMatch[0][2]
                    def updatedLine = line
                    versionMap.find { key, ver ->
                        if (ver.old == varValue) {
                            updatedLine = line.replace(varValue, ver.new)
                        }
                    }
                    return updatedLine
                }
                return line
            }.join('\n    ')
            return "${start}\n    ${updatedBody}\n${end}"
        }

        // Step 3: Update dependencies - handles:
        // - no version → add version
        // - direct version → replace
        // - variable version (e.g. ${springBootVersion}) → update variable already handled in Step 2
        def depPattern = ~/([ \t]*(implementation|api|compile|runtimeOnly|testImplementation|annotationProcessor|classpath)[ \t]+['"])([\w\.\-]+:[\w\.\-]+)(?::([^'"]+))?(['"])/
        updatedText = updatedText.replaceAll(depPattern) { match, prefix, conf, dep, versionPart, suffix ->
            def fullDepKey = dep
            def existingVersion = versionPart
            def newVersion = versionMap[fullDepKey]?.new

            if (newVersion) {
                // Case 1: version is missing → add it
                if (!existingVersion) {
                    return "${prefix}${dep}:${newVersion}${suffix}"
                }

                // Case 2: version is a variable → skip (updated in ext block already)
                if (existingVersion.startsWith("\${")) {
                    return match
                }

                // Case 3: version is a literal → replace it
                return "${prefix}${dep}:${newVersion}${suffix}"
            }

            return match
        }

        // Step 4: Write back to build.gradle
        buildFile.text = updatedText

        println "✅ build.gradle has been updated with latest versions!"
    }
}
