task updateDependencies {
    doLast {
        def reportFile = file("report.txt")
        def buildFile = file("build.gradle")
        def originalText = buildFile.text

        // Parse report.txt into a version map
        def versionMap = [:]
        reportFile.eachLine { line ->
            def m = line =~ /-\s+([\w\.\-]+):([\w\.\-]+)\s+\[(.*?) -> (.*?)\]/
            if (m.matches()) {
                def group = m[0][1]
                def name = m[0][2]
                def oldVer = m[0][3]
                def newVer = m[0][4]
                versionMap["$group:$name"] = [old: oldVer, new: newVer]
            }
        }

        def updatedText = originalText

        // 1. Update ext block variables like springBootVersion
        updatedText = updatedText.replaceAll(/(?s)(ext\s*\{)(.*?)(\})/) { match, start, body, end ->
            def updatedBody = body.readLines().collect { line ->
                def varMatch = line =~ /(\w+)\s*=\s*['"]([^'"]+)['"]/
                if (varMatch.find()) {
                    def varName = varMatch[0][1]
                    def varValue = varMatch[0][2]
                    def updatedLine = line
                    versionMap.find { k, v ->
                        if (v.old == varValue) {
                            updatedLine = line.replace(varValue, v.new)
                        }
                    }
                    return updatedLine
                }
                return line
            }.join('\n    ')
            return "${start}\n    ${updatedBody}\n${end}"
        }

        // 2. Update dependencies block
        def depPattern = ~/([ \t]*(implementation|api|compile|runtimeOnly|testImplementation|annotationProcessor|classpath)[ \t]+['"])([\w\.\-]+:[\w\.\-]+)(?::([^'"]+))?(['"])/
        updatedText = updatedText.replaceAll(depPattern) { match, prefix, conf, groupAndName, version, suffix ->
            def newVersion = versionMap[groupAndName]?.new
            if (!newVersion) return match

            if (version == null) {
                // No version, insert new one
                return "${prefix}${groupAndName}:${newVersion}${suffix}"
            } else if (version.startsWith("\${")) {
                // Version is variable — already updated in ext, skip here
                return match
            } else {
                // Replace hardcoded version
                return "${prefix}${groupAndName}:${newVersion}${suffix}"
            }
        }

        // 3. Save changes to build.gradle
        buildFile.text = updatedText

        println "✅ build.gradle has been updated successfully!"
    }
}
